import type PptxGenJs from "pptxgenjs";
import React from "react";
import { InternalImageSrc, InternalPresentation, InternalText } from "./normalizer";
import { ChildElement } from "./util";
declare type VisualBaseProps = {
    style?: {
        x: number | string;
        y: number | string;
        w: number | string;
        h: number | string;
    };
};
interface TextNodeBaseStyle {
    color?: string;
    fontFace?: string;
    fontSize?: number;
}
export declare type TextLinkProps = {
    children: string;
    tooltip?: string;
    style?: TextNodeBaseStyle;
} & ({
    url: string;
} | {
    slide: number;
});
export declare const isTextLink: (el: React.ReactElement) => el is React.FunctionComponentElement<TextLinkProps>;
export declare type TextChild = string | number | ChildElement<TextLinkProps> | TextChild[];
export declare type TextProps = VisualBaseProps & {
    children?: TextChild;
    style?: TextNodeBaseStyle & {
        align?: InternalText["style"]["align"];
        verticalAlign?: InternalText["style"]["verticalAlign"];
    };
};
export declare const Text: React.FC<TextProps> & {
    Link: React.FC<TextLinkProps>;
};
export declare const isText: (el: React.ReactElement) => el is React.FunctionComponentElement<TextProps>;
export declare type ImageProps = VisualBaseProps & {
    src: InternalImageSrc;
    style?: {
        /**
         * @deprecated no longer has any effect and will be removed soon! Use imageFit instead
         */
        backgroundSize?: "contain" | "cover";
        sizing?: {
            fit: "contain" | "cover" | "crop";
            imageWidth?: number;
            imageHeight?: number;
        };
    };
};
export declare const Image: React.FC<ImageProps>;
export declare const isImage: (el: React.ReactElement) => el is React.FunctionComponentElement<ImageProps>;
export declare type ShapeProps = VisualBaseProps & {
    type: keyof typeof PptxGenJs.ShapeType;
    children?: TextChild;
    style?: {
        backgroundColor?: string;
        borderWidth?: number;
        borderColor?: string;
    };
};
export declare const Shape: React.FC<ShapeProps>;
export declare const isShape: (el: React.ReactElement) => el is React.FunctionComponentElement<ShapeProps>;
export declare type VisualProps = TextProps | ImageProps | ShapeProps;
export declare type Visual = typeof Text | typeof Image | typeof Shape;
export declare type SlideProps = {
    children?: ChildElement<VisualProps>;
    hidden?: boolean;
    style?: {
        backgroundColor?: string;
        backgroundImage?: InternalImageSrc;
    };
};
export declare const Slide: React.FC<SlideProps>;
export declare type PresentationProps = {
    children?: ChildElement<SlideProps>;
    layout?: InternalPresentation["layout"];
};
export declare const Presentation: React.FC<PresentationProps>;
export {};
